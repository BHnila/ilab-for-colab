version: 3
domain: cybersecurity
created_by: BHnila
seed_examples:
  - context: |
      Brute-force attacks are a prevalent phenomenon that is getting harder
      to successfully detect on a network level due to increasing volume and en-
      cryption of network traffic and growing ubiquity of high-speed networks.
      Although the research in this field advanced considerably, there still remain
      classes of attacks that are undetectable.
    questions_and_answers:
      - question: |
          Why is detecting SSH, Telnet, and RDP brute-force attacks more difficult with encrypted network traffic?
        answer: |
          Encrypted network traffic conceals the contents of login attempts, such as usernames and passwords, making
          it impossible to inspect the payload directly. As a result, detection systems must rely solely on metadata
          like connection frequency, failed authentications, and session duration to infer brute-force activity.
      - question: |
          How do high-speed networks affect the ability to detect brute-force attacks in SSH, Telnet, or RDP logs?
        answer: |
          High-speed networks allow attackers to perform a large volume of login attempts rapidly and possibly from
          multiple distributed IPs. This can overwhelm traditional detection systems that rely on static thresholds,
          making it easier for brute-force activity to blend in with normal traffic.
      - question: |
          Despite advancements in research, why do certain brute-force attack patterns remain undetectable?
        answer: |
          Some brute-force attack patterns remain undetectable because they are designed to mimic legitimate
          user behavior. For example, attackers may space out login attempts over time or rotate through large
          pools of IP addresses, avoiding common detection indicators like excessive failed logins in a short period.
  - context: |
      In recent years, network security research started focusing on flow-based attack
      detection in addition to the well-established payload-based detection approach.
      Instead of only looking for malicious activity in the actual packet data, network
      flows are also considered for analysis. This is not surprising since the amount
      of data one has to fight with is drastically reduced and the attacks visible in flow
      data tend to complement the attacks that we strive to find in network payload.
    questions_and_answers:
      - question: |
          Why has flow-based detection become an important complement to payload-based methods in identifying brute-force attacks?
        answer: |
          Flow-based detection is valuable because it significantly reduces data volume and can reveal behavioral
          patterns such as repeated failed connection attempts, unusual access frequencies, or bursts of short-lived
          sessions—common indicators of SSH, Telnet, or RDP brute-force attacks.
      - question: |
          What kind of brute-force indicators can be observed in flow data that might be missed in payload analysis?
        answer: |
          Flow data can highlight anomalies such as a single IP attempting multiple short-duration connections,
          spikes in failed authentication attempts, or high-frequency session initiations—behaviors that may not
          be evident if payloads are encrypted or obfuscated.
      - question: |
          How does using flow data help in detecting brute-force attacks when payload inspection is limited or infeasible?
        answer: |
          When payload inspection is not possible—due to encryption or privacy concerns—flow data enables detection
          by focusing on connection metadata. Metrics like the number of login attempts per time unit,
          connection duration, and source IP diversity help identify brute-force activity without needing to access
          the actual credentials or commands.
  - context: |
      Attacks that occur in a network can be roughly divided into two categories, de-
      pending on their impact on traffic patterns. On the one side there are noisy
      attacks that disrupt these patterns significantly. One example is port scans that
      often precede actual attacks [9]. Such attacks are very easy to detect since all that
      is needed is to look for a sudden increase in traffic volume. Noisy attacks are useful
      to penetrate networks that are not sufficiently protected and to estimate defense
      capabilities of particular networks. They can also be used as a cover for stealthy
      attacks running simultaneously.
    questions_and_answers:
      - question: |
          How can noisy network attacks help identify brute-force attempts targeting SSH, Telnet, or RDP?
        answer: |
          Noisy attacks like port scans often precede brute-force attempts by identifying open ports and accessible
          services. Detecting these can serve as an early warning, prompting closer monitoring of SSH, Telnet, or
          RDP activity for signs of brute-force behavior.
      - question: |
          What network traffic characteristics typically signal a noisy attack like a brute-force login attempt?
        answer: |
          Brute-force login attempts often generate a high volume of short, repeated connection attempts from the
          same or rotating IP addresses. These bursts can significantly alter traffic patterns, making them detectable
          as noisy anomalies.
      - question: |
          Why might attackers use noisy attacks to hide stealthier brute-force activities?
        answer: |
          Noisy attacks can overwhelm monitoring systems or divert attention from more targeted brute-force attacks.
          By flooding the network with traffic spikes, attackers can mask slower, low-frequency brute-force attempts
          that mimic legitimate user behavior, making them harder to detect in real-time.
  - context: |
      On the other side, there are stealthy attacks. These attacks are much harder to
      gather and examine as they by virtue try to remain undetected. Stealthy attacks
      have to be crafted for a special target network and must reflect its detection
      capabilities. Staying under the radar also means that the attack is generally slower
      and that it has to run longer.
    questions_and_answers:
      - question: |
          How do stealthy brute-force attacks differ from noisy ones in SSH, Telnet, or RDP logs?
        answer: |
          Stealthy brute-force attacks operate slowly and avoid generating obvious traffic patterns. They may use
          long time intervals between login attempts, rotate IP addresses, and limit failed attempts to evade
          threshold-based detection systems, unlike noisy attacks which are fast and easily detectable.
      - question: |
          What indicators in network logs might suggest the presence of a stealthy brute-force attack?
        answer: |
          Indicators of stealthy brute-force attacks include repeated login attempts over an extended period,
          low-frequency authentication failures from varying IPs, and login attempts spaced at consistent time intervals,
          all while staying below typical alerting thresholds.
      - question: |
          Why are stealthy brute-force attacks harder to detect using conventional intrusion detection systems (IDS)?
        answer: |
          Conventional IDS often rely on high-volume anomalies or threshold breaches to detect intrusions.
          Stealthy brute-force attacks deliberately avoid these triggers by mimicking normal user behavior,
          making them difficult to detect without behavioral analysis or long-term pattern correlation.
  - context: |
      Brute-force attacks are most frequently detected at the host level by inspecting
      access logs. If the predefined number of unsuccessful login attempts is reached, an
      alert is fired, the attacker blocked or other attempts significantly delayed. This
      approach is effective, even for distributed attacks. The main drawback is that it
      does not scale well.
    questions_and_answers:
      - question: |
          How are SSH, Telnet, or RDP brute-force attacks commonly detected at the host level?
        answer: |
          They are typically detected by monitoring access logs for repeated failed login attempts. When the number
          of unsuccessful logins exceeds a predefined threshold, the system triggers an alert or takes automated
          action such as blocking the source IP or slowing down further attempts.
      - question: |
          Why is host-level brute-force detection considered effective even for distributed attacks?
        answer: |
          Host-level detection focuses on the cumulative number of failed logins, regardless of source IP.
          This allows it to recognize patterns of distributed brute-force attacks where multiple IPs attempt
          logins on the same host, collectively exceeding failure thresholds.
      - question: |
          What is a key limitation of using host-level detection for brute-force attacks across large networks?
        answer: |
          Host-level detection does not scale well across large infrastructures because it requires
          local monitoring and rule enforcement on each endpoint. Managing thresholds, alerts, and blocking
          mechanisms individually can be resource-intensive and difficult to coordinate across many systems.
  - context: |
      Similarly to pattern matching in deep packet inspection, signatures can be used
      in flow-based intrusion detection too. The flow-based signatures describe network
      traffic by specific values, or ranges of values, of flow features and computed statis-
      tics. The signatures are then searched in acquired flows. This is done in separate
      time windows, typically when exported flows are sent from the collecting process
      to the metering process. So this simple approach does not consider changes of the
      monitored traffic in time.
    questions_and_answers:
      - question: |
          How are signatures used in flow-based detection to identify brute-force attacks?
        answer: |
          Flow-based detection uses signatures composed of specific flow attributes—such as connection count,
          duration, byte count, and failed login ratios—to identify brute-force patterns. These signatures help
          detect repeated access attempts to services like SSH, Telnet, or RDP within defined time windows.
      - question: |
          What is a key limitation of using static flow-based signatures for detecting brute-force attacks?
        answer: |
          Static flow-based signatures analyze traffic in fixed time windows and may miss gradual or time-distributed
          brute-force attacks. They do not account for temporal changes, making them ineffective against stealthy attacks
          that spread login attempts over longer durations.
      - question: |
          Why is time window granularity important in detecting brute-force behavior using flow-based methods?
        answer: |
          Time window granularity affects the detection sensitivity. If the window is too short, distributed or
          low-frequency brute-force attempts may go unnoticed. Conversely, too long a window may dilute the pattern,
          making the attack indistinguishable from normal activity.
  - context: |
      Concerning brute-force attacks, the relevant signature can be comprised of
      features and statistics describing both requests and replies thanks to the interactive
      nature of the attacks. The requests carry attempted credentials and the replies
      information about whether the login was successful or not.
    questions_and_answers:
      - question: |
          Why is it important to analyze both requests and replies when detecting brute-force attacks in flow data?
        answer: |
          Analyzing both requests and replies captures the full interaction, allowing detection systems to correlate
          attempted credentials with server responses. This helps identify patterns such as repeated authentication
          failures followed by a rare success, which is a strong indicator of brute-force activity.
      - question: |
          What type of reply data is most useful for detecting SSH, Telnet, or RDP brute-force attacks?
        answer: |
          Reply data indicating failed or denied authentication attempts is crucial. A high ratio of failed responses
          compared to successful ones across many sessions is a key signature of brute-force attacks targeting services
          like SSH, Telnet, or RDP.
      - question: |
          How does the interactive nature of brute-force attacks enhance their detectability in flow-based systems?
        answer: |
          Because brute-force attacks involve a sequence of requests and responses, flow-based systems can use this
          interactivity to identify abnormal patterns—such as a large volume of authentication attempts met with consistent
          failures—thereby improving detection accuracy compared to analyzing one-sided traffic alone.
  - context: |
      Method First, the most popular attacked services such as SSH, Telnet, RDP or
      web applications using HTTP or HTTPS are run on mostly well-known network
      ports such as TCP/22, TCP/23, TCP/3389, TCP/80 or TCP/443. Second, the
      source port of the client (attacker) request, i. e. the destination port of the reply,
      is usually greater than 1024. Third, login attempts and server replies have a
      specific (range of) size and duration. These characteristics can be captured by
      the number of packets and bytes of a flow, its duration or statistics: packets per
      second, bytes per second and bytes per packet.
    questions_and_answers:
      - question: |
          How can well-known destination ports help in detecting brute-force attacks on services like SSH, Telnet, or RDP?
        answer: |
          Since brute-force attacks often target services running on standard ports such as TCP/22 (SSH), TCP/23 (Telnet),
          and TCP/3389 (RDP), monitoring flows directed to these ports helps identify suspicious activity patterns like
          repeated authentication attempts or high connection frequency.
      - question: |
          What does the client source port reveal in the context of identifying brute-force activity?
        answer: |
          Client source ports in brute-force attacks are typically ephemeral (above 1024), varying with each new attempt.
          Observing multiple connections from different source ports to the same destination port can signal automated
          brute-force behavior, especially when combined with high connection volume.
      - question: |
          Which flow-level features are useful for detecting brute-force login attempts and why?
        answer: |
          Features like number of packets, total bytes, flow duration, packets per second, and bytes per packet help
          distinguish brute-force attempts. For instance, many short-duration flows with low data volume and high frequency
          may indicate repeated failed login attempts typical of brute-force attacks.
  - context: |
      The signature of an attacker’s attempt of SSH authentication may be defined as follows: protocol = TCP,
      source port > 1024, destination port = 22, packets > 10, packets < 30, bytes > 1400, bytes < 5000,
      duration < 5 s. Next, selected features of flows matching the given signatures may be analyzed again.
      For example, in order to determine the number of unique attackers and victims (source and destination IP addresses).
      Finally, the number of matching flows is counted for each attacking IP address and if the predefined threshold is reached,
      an alert is fired. The threshold should express an anomalous number of login attempts in the time window
      (e. g. 10 in a 5-minute time window for the sample SSH signature above).
    questions_and_answers:
      - question: |
          What flow characteristics define a typical SSH brute-force attempt based on the provided signature?
        answer: |
          A typical SSH brute-force attempt is defined by flows using the TCP protocol, a source port above 1024,
          destination port 22, between 10 and 30 packets, between 1400 and 5000 bytes, and a duration of less than 5 seconds.
          These characteristics indicate short, interactive login sessions often seen in brute-force scenarios.
      - question: |
          How is the number of unique brute-force attackers and victims determined in flow-based detection?
        answer: |
          By analyzing the source and destination IP addresses of flows that match the defined signature,
          the system can identify how many distinct attackers (source IPs) and victims (destination IPs) are involved.
          This helps distinguish between isolated incidents and widespread attacks.
      - question: |
          What role does a threshold play in triggering brute-force alerts, and how should it be set?
        answer: |
          A threshold defines the number of matching flows from an IP address within a set time window that is considered
          anomalous. If this number is exceeded—such as 10 login attempts in 5 minutes—an alert is triggered.
          The threshold must balance sensitivity and false positives to effectively detect brute-force activity
  - context: |
      Method First, all incoming flows are clustered in a separate time window to
      isolated groups of similar flows. The similarity is measured by the distance of par-
      ticular flows (points) in space defined by flow features and statistics. We need
      to choose a distance metric function, its input parameters, i. e. suitable flow
      features, radius used for determination if the flow (point) belongs to groups of
      flows (points) that are close to each other. For example, we can define points
      pid representing flows in two-dimensional space as follows: pid = (pkt, byt), where
      pkt is the number of packets and byt the number of bytes in the flow, and id
      is a flow identification used in further processing.
    questions_and_answers:
      - question: |
          How is flow similarity used to detect brute-force attacks in network traffic?
        answer: |
          Similar flows—such as those with comparable packet and byte counts—are clustered using distance metrics
          within defined time windows. Brute-force attacks often generate repeated, nearly identical connection attempts,
          making them stand out as dense clusters in feature space.
      - question: |
          What flow features are commonly used for clustering in brute-force detection, and why?
        answer: |
          Common features include the number of packets and bytes per flow, as they reflect the size and behavior of each
          connection attempt. Brute-force login attempts typically result in short, uniform interactions, producing
          similar pkt-byt pairs that are easily grouped together.
      - question: |
          Why is the choice of distance metric and clustering radius important for detecting brute-force patterns?
        answer: |
          The distance metric and radius determine which flows are considered similar and grouped together. If chosen
          correctly, they help isolate clusters of abnormal behavior—such as repeated login attempts—while minimizing
          false positives from legitimate traffic variations.
  - context: |
      Second, we assume that flows representing malicious traffic are grouped in
      clusters and flows representing benign traffic are not similar, therefore they form
      clusters with a negligible number of members (points). There is also a possibility
      to discard these clusters for further processing.
      Third, IP addresses of flows (points) within each cluster are inspected and the
      type of the attack is determined. If the cluster contains randomly distributed
      IP addresses, it may indicate benign traffic. On the contrary, if it is possible to
      find the same source or destination addresses, it may point out to a multiple or a
      distributed attack. Finally, the IP address is classified as the attacker if it generated more than
      the predefined number of flows.
    questions_and_answers:
      - question: |
          How are malicious brute-force traffic clusters distinguished from benign traffic in flow analysis?
        answer: |
          Malicious brute-force traffic tends to form dense clusters of similar flows, while benign traffic usually
          results in sparse or unique flow patterns. Clusters with many similar flows are flagged for further analysis,
          while those with negligible members are considered benign and discarded.
      - question: |
          How can analyzing source and destination IPs within a cluster help identify brute-force attacks?
        answer: |
          If a cluster contains multiple flows from the same source IP targeting a specific destination, it indicates
          a focused brute-force attempt. Conversely, multiple source IPs targeting the same destination may suggest
          a distributed brute-force attack.
      - question: |
          What criterion is used to classify an IP address as an attacker in this clustering-based approach?
        answer: |
          An IP address is classified as an attacker if it is associated with a cluster and has generated more than
          a predefined number of flows within the analysis window. This threshold-based rule helps isolate IPs
          responsible for high-volume, suspicious activity indicative of brute-force behavior.
  - context: |
      Most of the brute-force attacks that we have observed in practice exhibit one
      similarity that we attribute to their automated behavior: the intensity of an attack
      from one source remains relatively constant and periodic during its course. This
      attribution is supported by our knowledge of available brute-forcing tools that
      generally allow their users to set the attack intensity only by specifying the number
      of attack tasks running in parallel. Traffic with such property is naturally not unique to brute-force attacks —
      querying the NTP server, various protocols’ keep-alives, IM, etc. behave in a similar
      way — however, this communication is usually directed to well-known machines or
      ports that are generally not targets of attacks. These can be thus easily discarded
      beforehand.
    questions_and_answers:
      - question: |
          What characteristic of brute-force attack traffic suggests automation?
        answer: |
          Brute-force attack traffic often maintains a relatively constant and periodic intensity,
          reflecting automated tools configured to run a fixed number of parallel login attempts.
          This regularity in traffic patterns is a strong indicator of automated behavior.
      - question: |
          How can periodic traffic patterns help distinguish brute-force attacks from normal traffic?
        answer: |
          While other protocols like NTP or IM may also show periodic patterns, their communication
          is typically directed at known services or non-sensitive ports. In contrast, periodic traffic
          aimed at login services like SSH or RDP is more likely to indicate brute-force activity,
          especially when directed at a wide range of targets.
      - question: |
          Why is it important to filter out benign periodic traffic before analyzing for brute-force attacks?
        answer: |
          Filtering out benign periodic traffic—such as protocol keep-alives or server queries—reduces false positives.
          Since these communications are typically directed to trusted ports or known services, removing them helps
          isolate suspicious periodic activity that may be part of a brute-force campaign.
  - context: |
      The SSH attack typically has three phases: Scanning, Brute-force and Die-off. In our experience, this scheme is
      not limited to SSH attacks and can be applied to other protocols and authentication schemes. Flow-wise, the scanning
      phase is identified by large amount of small flows destined to a large number of targets. There are usually lots of
      unsuccessful connections to closed or filtered ports. In the brute-force phase, recorded flows are larger and
      destined to specific targets with virtually no unsuccessful connections. The die-off phase that is equal to a successful
      attack has usually few large and infrequent flows. Both expect to some extent a specific attacking machine to go from
      Scanning phase over Brute-force phase and eventually to Die-off phase. This is a valid heuristic for attackers with
      limited number of machines at their disposal. However, attackers with more resources can allocate their machines into
      groups specialized on each phase, thus evading this heuristic with only a little overhead.
    questions_and_answers:
      - question: |
          What are the three typical phases of an SSH brute-force attack and how are they reflected in flow data?
        answer: |
          The three phases are Scanning, Brute-force, and Die-off. The Scanning phase shows many small flows to
          numerous targets, often failing due to closed ports. The Brute-force phase involves larger flows directed at
          specific targets with active login attempts. The Die-off phase, indicating successful compromise, shows fewer,
          larger, and less frequent flows.
      - question: |
          How can flow characteristics be used to distinguish between the scanning and brute-force phases of an attack?
        answer: |
          In the scanning phase, flows are numerous, small, and distributed across many targets with high failure rates.
          In contrast, the brute-force phase has fewer, larger flows aimed at specific hosts, reflecting sustained
          authentication attempts with fewer connection failures.
      - question: |
          Why might the traditional three-phase heuristic fail to detect distributed brute-force attacks?
        answer: |
          The heuristic assumes that a single attacking machine progresses through all three phases. However, attackers
          with more resources can distribute the phases across multiple machines—some scanning, others brute-forcing,
          and others exploiting—making detection harder since no single IP shows the full pattern.
  - context: |
      Commonly available brute-forcing tools (e.g., AccessDiver, Sentry, Hydra) allow
      attackers to configure the number of threads that will run in parallel. This effectively determines the average amount
      of attack attempts per given time window. This amount remains relatively constant during the course of an attack. This
      behavior is exploited by methods presented in Section 2.3 to detect attacking machines.
    questions_and_answers:
      - question: |
          How does thread configuration in brute-forcing tools affect attack detection?
        answer: |
          Brute-forcing tools like Hydra or Sentry allow attackers to set a fixed number of parallel threads,
          leading to a consistent and predictable rate of login attempts. This constant behavior creates identifiable
          traffic patterns that detection systems can monitor for anomalies within defined time windows.
      - question: |
          What traffic characteristic is leveraged to detect machines performing brute-force attacks using tools like AccessDiver?
        answer: |
          The relatively constant rate of authentication attempts—determined by the number of threads—produces
          uniform flow behavior over time. This temporal consistency in failed login attempts is used to identify
          and flag suspicious activity indicative of brute-force attacks.
      - question: |
          Why is the constant nature of attack traffic useful for identifying brute-force activity in network logs?
        answer: |
          Because legitimate login activity tends to be sporadic and user-driven, a steady, high-frequency stream
          of authentication attempts is unusual. This constant traffic pattern, typical of automated tools,
          makes it easier to distinguish brute-force attempts from normal behavior in flow or log-based analysis.
  - context: |
      By introducing temporal distortions (e. g., random delays) to traffic flows, the
      attacker can disrupt the periodicity and the automated profile of an attack, thus
      rendering the detection method ineffective. The NCrack brute-forcer is going
      partly this way by adapting its brute-forcing process automatically to network
      conditions (e.g., waiting with the next attack attempts after blocking of a ma-
      chine or proxy), but to the authors’ knowledge, there is no available brute-forcer
      to employ this relatively cheap and easy technique.
    questions_and_answers:
      - question: |
          How do temporal distortions help evade brute-force detection mechanisms?
        answer: |
          Temporal distortions, such as random delays between login attempts, break the regular, periodic patterns
          typical of automated brute-force tools. This disrupts the consistency-based detection methods that rely
          on identifying constant traffic rates, making it harder to recognize attacks.
      - question: |
          What makes temporal distortion a low-cost but effective method for evading detection?
        answer: |
          Temporal distortion requires only minor modifications to the timing of attack attempts, which can be
          implemented with little computational or design overhead. Despite its simplicity, it significantly reduces
          the visibility of automated attack patterns in traffic analysis.
      - question: |
          How does NCrack differ from other brute-forcing tools in terms of evasion techniques?
        answer: |
          NCrack partially adapts its brute-force behavior to network conditions, such as delaying further attempts
          when a proxy or target becomes unresponsive or blocked. This adaptive behavior helps avoid detection
          by not maintaining a constant rate of login attempts, unlike most other tools.
  - context: |
      Some detection methods that were discussed so far relied on particular flows being
      relatively short and only a few packets in volume. This is reasonable, given that
      attacking machines usually exchange the bare minimum of data in order to try
      to authenticate. Flows of a particular attack thus look alike; the only difference
      is a few bytes, usually influenced by username and password length. There is,
      however, danger in such an approach. Several important protocols — SSH, RDP
      and HTTP(S) — by design allow the exchange of arbitrary data in the process
      of authentication, before the final decision whether to let an attacker in or not is
      made. This arbitrary data can be used to inflate both the flow size and the flow
      duration. Such inflated flows no longer look alike. Instead, they can be made to
      look like valid communication and avoid detection.
    questions_and_answers:
      - question: |
          Why do traditional flow-size-based detection methods risk missing brute-force attacks?
        answer: |
          These methods often assume that brute-force attempts produce short flows with minimal data. However,
          protocols like SSH and RDP allow arbitrary data exchange before authentication, enabling attackers
          to intentionally inflate flow size and duration, thereby making their traffic resemble legitimate communication.
      - question: |
          How can attackers use protocol features to evade flow-based detection?
        answer: |
          Attackers can exploit protocol flexibility to inject arbitrary data into the authentication phase,
          increasing flow size and duration. This disrupts the uniformity of brute-force flows, preventing
          clustering or signature-based detection methods from identifying them as part of an attack.
      - question: |
          What is the impact of inflating brute-force flows on anomaly detection techniques?
        answer: |
          Inflated flows reduce the similarity between attack attempts, making it harder for detection systems
          to group them or recognize them as anomalies. This tactic helps brute-force attacks blend in with
          legitimate traffic and evade detection based on packet count, byte volume, or session duration.
  - context: |
      The Remote Desktop Protocol (RDP) is a proprietary protocol developed by Microsoft, which provides a remote
      access to a computer over a network connection. Recently, we have seen an increase in attacks on Microsoft
      Windows remote desktop connection authentication. Current detection methods are based on event log analysis
      or the Account Lockout Policy used in Windows domain networks.
    questions_and_answers:
      - question: |
          What indicators in event logs can suggest an RDP brute-force attack?
        answer: |
          Indicators include a high frequency of failed login attempts (Event ID 4625), particularly from a single
          IP address or a small group of addresses, and repeated targeting of specific accounts. Additionally, patterns
          like frequent logon failures followed by a successful login may indicate a brute-force attempt.
      - question: |
          How does the Account Lockout Policy contribute to detecting RDP brute-force attacks?
        answer: |
          The Account Lockout Policy temporarily disables user accounts after a predefined number of failed login
          attempts. This not only helps mitigate brute-force attacks by limiting repeated guesses but also triggers
          security events that can be monitored for unusual lockout activity.
      - question: |
          Why are brute-force attacks against RDP on the rise?
        answer: |
          RDP has become a common vector due to its widespread use for remote work and administrative access. Attackers
          exploit exposed RDP endpoints using automated tools to attempt login credentials, often targeting weak or
          default passwords.
  - context: |
      Both brute-force and dictionary attacks are aimed at a wide-spread knowledge-based authentication. In both
      cases, attackers suppose that users choose their passwords from a small subset of the full password space, e. g.,
      short passwords, dictionary words, proper names, and lowercase strings [1]. The attackers attempt to login to user
      accounts by trying possible passwords until they find the correct one. If the attackers use a predefined list of
      common passwords, they conduct dictionary attack, otherwise they systematically search entire space of
      passwords using brute-force attack. In this paper, we use the term brute-force attack for both types of attacks
      since we cannot distinguish them at flow level because it does not provide any information about the packet
      payload.
    questions_and_answers:
      - question: |
          Why can't dictionary and brute-force attacks be distinguished at the flow level?
        answer: |
          At the flow level, there is no access to packet payload data, such as the actual login attempts or passwords used.
          This lack of detail makes it impossible to determine whether attackers are using a dictionary of common passwords
          or attempting every possible combination, so both are grouped under brute-force attacks.
      - question: |
          What assumptions do attackers make about user passwords in brute-force and dictionary attacks?
        answer: |
          Attackers assume that users tend to choose weak or predictable passwords, such as short strings, dictionary
          words, proper names, or all-lowercase combinations. This assumption reduces the effective password space
          and increases the likelihood of a successful attack.
      - question: |
          What is a practical implication of not distinguishing between brute-force and dictionary attacks in detection systems?
        answer: |
          Detection systems must focus on behavior-based indicators like rapid, repeated login attempts or abnormal
          authentication patterns rather than the content of passwords. This unified approach simplifies detection but may
          lack the granularity to tailor responses to specific attack types.
  - context: |
      In our previous work [2], we focused on brute-force attacks on the popular SSH service but currently we have
      been observing an increase in attacks on the authentication of the Remote Desktop Protocol (RDP). It is a
      Microsoft proprietary protocol used for remote desktop connection for Windows operating systems. Since
      Windows XP, the systems provide not only client but also server (denoted as Remote Desktop Connection and
      Remote Desktop Services) that is often left unsecured by unskilled users. This causes a growing number of brute-
      force attacks on remote desktops. For instance, Morto [3] represents a recent example of a worm that spreads by
      remote desktops secured by weak passwords.
    questions_and_answers:
      - question: |
          Why are RDP services increasingly targeted by brute-force attacks?
        answer: |
          RDP services are often enabled by default on Windows systems and frequently left unsecured by unskilled users.
          The presence of weak or default passwords on these services provides an easy entry point for attackers, leading
          to an increase in brute-force attack attempts.
      - question: |
          What is the significance of the Morto worm in the context of RDP brute-force attacks?
        answer: |
          Morto is a worm that propagates by exploiting RDP services protected by weak passwords. Its appearance
          illustrates how attackers automate brute-force attempts to spread malware through vulnerable remote desktop
          environments.
      - question: |
          How does the shift from SSH to RDP brute-force attacks reflect changes in attacker behavior?
        answer: |
          The shift suggests that attackers are adapting their targets based on the availability and vulnerability of services.
          As more systems expose RDP due to remote work and default configurations, attackers pivot from traditional SSH
          targets to RDP, which may offer easier access due to weaker security practices.
  - context: |
      Current detection and prevention of brute-force attacks on RDP is done at the host level. The detection is based
      on an event log analysis: if a number of unsuccessful login attempts exceeds a predefined threshold, the attack is
      reported and the attacker may be blocked by a host firewall. For attack prevention, Account Lockout Policy is
      often used in networks of devices under control of the network administrator.
    questions_and_answers:
      - question: |
          How is a brute-force attack on RDP typically detected at the host level?
        answer: |
          Detection is commonly based on event log analysis. If the number of failed login attempts within a certain
          timeframe exceeds a predefined threshold, the system identifies this as a brute-force attack and may log the
          event or initiate a defensive response such as firewall blocking.
      - question: |
          What role does the Account Lockout Policy play in preventing brute-force attacks on RDP?
        answer: |
          The Account Lockout Policy automatically locks a user account after a set number of failed login attempts.
          This limits the number of guesses an attacker can make and helps prevent brute-force attacks from succeeding
          by making further login attempts impossible without administrator intervention.
      - question: |
          What is a limitation of host-level brute-force detection based on event log thresholds?
        answer: |
          A major limitation is that attackers can evade detection by spreading login attempts across multiple hosts
          or by staying just below the threshold on each target. Additionally, such detection is reactive and may not
          stop the attack until several login attempts have already occurred.
  - context: |
      The authentication process of the client works with very low bandwidth
      requirements. The whole authentication fits in several packets and every authentication attempt forms two
      separate flows. Every authentication attempt does fit in two flows. The actual remote desktop session is started
      after the successful authentication. The two flows lasting 0.8 seconds represent canceled connection right after
      the successful authentication. The last two long-lasting flows contain the actual session. There is also a large
      increase in number of packets and bytes transferred in contrast to the authentication.
    questions_and_answers:
      - question: |
          How can flow duration and size help distinguish between RDP authentication attempts and full sessions?
        answer: |
          RDP authentication attempts typically generate two short-lived flows with minimal data transferred. In contrast,
          successful authentications followed by actual desktop sessions result in long-duration flows with significantly
          higher packet and byte counts. These differences in flow characteristics help distinguish brute-force attempts
          from legitimate sessions.
      - question: |
          What does a pattern of many short RDP flows with low bandwidth usage indicate in network logs?
        answer: |
          A pattern of numerous short-duration RDP flows with low data transfer may indicate repeated authentication
          attempts—potentially part of a brute-force attack—where each flow ends before a full session begins.
      - question: |
          How does the start of a legitimate RDP session appear in flow-level data?
        answer: |
          A legitimate RDP session is marked by two initial flows for authentication, followed by two long-lasting flows
          with a significant increase in packet and byte volume, indicating the start of an interactive remote desktop session.
  - context: |
      We also analyzed other tools that can be used for brute-force attacks on RDP. We tested the xTSCrack [4] tool
      for Windows platform and Ncrack [5] for Linux systems. The flow signature of the Ncrack is shown in Table 3.
      The signature of the xTSCrack is very similar to the signature of the Ncrack. The only difference is the volume of
      traffic due to lower client optimization in Linux system. The first four lines in the table are two unsuccessful
      authentication attempts. One login and password combination per remote session forms a separate couple of
      flows. In contrast, the authentication from regular clients is a part of one flow, except the client in Windows 7.
      The last two flows describe the signature of successful authentication. The differences between successful and
      unsuccessful authentication are not compelling enough to be able to reliably determine whether the attack is
      successful or not.
    questions_and_answers:
      - question: |
          What is a key flow-level difference between brute-force tools like Ncrack and regular RDP clients?
        answer: |
          Brute-force tools like Ncrack generate separate flow pairs for each login attempt, resulting in multiple short
          sessions per authentication. In contrast, regular RDP clients typically perform authentication within a single
          flow, except in the case of Windows 7 clients.
      - question: |
          Why is it difficult to determine the success of a brute-force attack on RDP using flow signatures alone?
        answer: |
          The differences in flow characteristics between successful and unsuccessful authentications—such as duration
          or traffic volume—are not significant enough to reliably differentiate outcomes, especially when using automated
          tools like Ncrack or xTSCrack.
      - question: |
          How does platform optimization affect the network traffic generated by brute-force tools?
        answer: |
          Tools like Ncrack on Linux generate more traffic compared to xTSCrack on Windows due to less efficient
          client-side optimization, resulting in higher packet and byte counts for similar authentication attempts.
  - context: |
      The results of the analysis give to us enough information to derive the NetFlow signature of the process of
      authentication. During the analysis we do not find any evidence that the client in Windows 7 or a tool with
      similar signature of flow are used for a brute-force attack. The use of other clients will not be very effective
      because the remote session is closed by server after several unsuccessful authentications. Attacking tools and the
      worm have very similar behavior. In contrast to proper clients, every authentication attempt is in separate flow
      therefore we are able to determine the number of attempts. The clients can be divided into two categories. The
      first category in which belongs only the client in Windows 7 uses optimized authentication and the remote
      desktop connection is opened only if the previous authentication was successful. The second category covers all
      other clients and the authentication process takes place on the remote desktop.
    questions_and_answers:
      - question: |
          How can NetFlow data help distinguish brute-force attacks from legitimate RDP usage?
        answer: |
          Brute-force tools and malware generate one flow per authentication attempt, enabling detection by counting
          flow attempts. Legitimate clients, especially Windows 7, typically use optimized authentication where the remote
          session starts only after a successful login, resulting in fewer flows.
      - question: |
          Why are tools with non-Windows 7 flow signatures more suitable for brute-force attacks?
        answer: |
          Unlike the Windows 7 client, which only opens a remote desktop connection after successful authentication,
          other clients allow the authentication process to take place directly on the remote desktop. This allows
          brute-force tools to repeatedly initiate login attempts without needing successful access first.
      - question: |
          What behavioral similarity do brute-force tools and worms exhibit in network flow patterns?
        answer: |
          Both generate distinct, separate flows for each authentication attempt, which contrasts with regular client behavior.
          This repetitive, segmented flow pattern is a strong indicator of automated brute-force activity in network traffic.
  - context: |
      From the given flow signatures and the differences in direction of the communication in flow, we decide to use
      bidirectional flows. The client requests and the server responses are linked in one biflow record. As opposed to
      using unidirectional flows, biflows enable us to distinguish more accurately between the legitimate and malicious
      traffic. The final signature is generalized over all clients and all tools that we analyzed.
    questions_and_answers:
      - question: |
          Why are bidirectional flows preferred over unidirectional flows for detecting brute-force attacks on RDP?
        answer: |
          Bidirectional flows (biflows) combine both client request and server response into a single record, allowing for
          more accurate analysis of session behavior. This provides better context for identifying patterns such as failed
          login attempts or abnormal connection sequences, which are crucial in detecting brute-force activity.
      - question: |
          How does the use of biflows improve detection accuracy for distinguishing legitimate and malicious traffic?
        answer: |
          Biflows provide a complete view of communication between the client and server, capturing both directions in
          one flow. This helps in identifying anomalies in request-response behavior, such as repeated failed authentications,
          which are less apparent in unidirectional flows.
      - question: |
          What is the significance of generalizing the final flow signature across all analyzed clients and tools?
        answer: |
          Generalizing the signature ensures the detection model can identify brute-force attacks regardless of the specific
          tool or client used. It abstracts key behavioral patterns, enabling broader and more consistent detection across
          varied environments and attack vectors.
  - context: |
      The flow-based signature of the RDP authentication attempt uses the following six features:
      in packets – the number of the incoming packets – <20, 100>,
      in bytes – the volume of the incoming traffic in Bytes – <2200, 8001>,
      out packets – the number of the outgoing packets – <30, 190>,
      out bytes – the volume of the outgoing packets – <3000, 180000>,
      flags – TCP flags – ACK, PUSH, RESET, SYN,
      dst net – the address of the local network.
    questions_and_answers:
      - question: |
          What role do packet and byte count thresholds play in the RDP authentication flow signature?
        answer: |
          These thresholds help define the typical size and volume of RDP authentication flows. Deviations from the
          expected ranges—such as a large number of small flows or consistently low packet/byte counts—can indicate
          automated brute-force attempts rather than legitimate usage.
      - question: |
          How can TCP flags be used to identify RDP brute-force behavior?
        answer: |
          Specific TCP flags like ACK, PUSH, RESET, and SYN can reveal unusual connection behavior. For instance, frequent
          use of RESET may suggest aborted or failed connection attempts, a pattern common in brute-force attacks
          where many logins fail quickly.
      - question: |
          Why is the destination network address included in the flow signature for RDP authentication?
        answer: |
          Including the destination network helps to isolate internal traffic from external threats. It enables security systems
          to focus on suspicious inbound connections to the local network, which is critical for identifying external brute-force
          attempts targeting RDP services.
  - context: |
      Since we deploy attack mitigation based on the detection using this signature in the production network, we use
      three additional conditions based on measurements presented in [6] to lower false positives:
      attacker used a TCP SYN scan technique of network reconnaissance before the actual brute-
      force attack,
      time factor of attack, i. e., the time distance of the attack and the network reconnaissance is
      lower than a predefined value,
      at least three authentication attempts per server and at least three attacked servers at the same
      time.
      If all these conditions hold, the source IP address of the attacker is reported.
    questions_and_answers:
      - question: |
          How does the use of a TCP SYN scan assist in identifying brute-force attacks?
        answer: |
          A TCP SYN scan is a common reconnaissance method used to discover open ports before launching attacks.
          Detecting such a scan prior to authentication attempts indicates pre-attack probing behavior, strengthening
          the case that the activity is malicious rather than legitimate use.
      - question: |
          Why is the timing between reconnaissance and brute-force attempts important in reducing false positives?
        answer: |
          A short time interval between a TCP SYN scan and brute-force login attempts suggests a coordinated attack
          sequence. This temporal correlation helps differentiate deliberate attack behavior from unrelated or benign
          scanning or login anomalies.
      - question: |
          What is the purpose of requiring multiple authentication attempts across multiple servers for attack detection?
        answer: |
          Requiring at least three authentication attempts per server and activity on at least three servers increases the
          confidence that the behavior is part of a distributed brute-force attack. This multi-target pattern is unlikely to
          occur in legitimate scenarios and helps reduce false positives.
  - context: |
      We estimate that approximately 40% of all RDP related traffic in the campus network is malicious. Next, we analyze
      user names collected in the event log of the server used as a simple honeypot. The most frequently used user names
      were: administrator; admin; user; test; user1 and user2. We found out that 60% of attacks captured by the honeypot
      used the same sequence of user names which is used by the worm Morto. We assume that the attacks in the campus
      network share the same pattern.
    questions_and_answers:
      - question: |
          What does the use of a honeypot reveal about brute-force attack behavior on the campus network?
        answer: |
          The honeypot revealed that a significant portion of brute-force attacks target common usernames and that many
          attacks follow a predictable sequence of usernames. This suggests attackers are using automated tools or malware,
          such as the Morto worm, which rely on standard username lists.
      - question: |
          How can the detection of repeated username patterns improve RDP brute-force attack detection?
        answer: |
          Identifying repeated sequences of usernames, especially those known to be used by worms like Morto, allows
          defenders to flag and block traffic that matches these patterns. This improves detection accuracy by leveraging
          behavioral signatures associated with malicious tools.
      - question: |
          Why is it significant that 40% of RDP traffic is estimated to be malicious in a campus network?
        answer: |
          A 40% rate of malicious RDP traffic indicates a high level of ongoing brute-force activity, suggesting that RDP
          services in the network are attractive targets. This level of threat justifies proactive monitoring, honeypot
          deployment, and stricter access controls to protect vulnerable endpoints.
  - context: |
      Currently, detection of online brute-force attacks on RDP authentication is done at host level. In spite of the fact
      that network-based detection offers advantages such as scalability or better capability of detecting distributed
      attacks, we were not aware of any network-based or even flow-based method of detection of RDP attacks. We
      analyzed network flows acquired during RDP authentication of various clients and proposed the general signature
      for detection of RDP brute force attacks. The proposed signature benefits from bidirectional flows since brute-
      force attacks consist of interactive communication between two parties. In addition, we are able to detect the
      authentication attempts even though the protocol is encrypted.
    questions_and_answers:
      - question: |
          What are the main limitations of host-level detection for RDP brute-force attacks?
        answer: |
          Host-level detection is limited in scalability and may struggle to detect distributed attacks originating from
          multiple IPs across the network. It also depends on local log analysis, which may be bypassed or unavailable
          if attackers disable logging or compromise the host.
      - question: |
          How does using bidirectional network flows improve the detection of RDP brute-force attacks?
        answer: |
          Bidirectional flows capture both client and server communication, allowing for detailed analysis of session
          behavior. This helps detect interactive patterns typical of brute-force attacks, even without access to packet
          payloads, by focusing on timing, volume, and connection structure.
      - question: |
          Why is it significant that the proposed flow-based detection method works even with encrypted RDP traffic?
        answer: |
          Since RDP traffic is encrypted, traditional payload inspection is ineffective. The proposed method's ability to
          detect authentication attempts using flow-level metadata (e.g., packet counts, durations, flags) makes it
          effective without needing to decrypt traffic, preserving both privacy and performance.
document_outline: |
  - "Collection of research papers about brute-force attacks detection"
document:
  repo: https://github.com/BHnila/bakalarka-knowledge-base.git
  commit: 611d2ddc54015c5dd1a214048ef9d039b2c2bddc
  patterns:
    - "*.pdf"
